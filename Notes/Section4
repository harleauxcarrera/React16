Lecture 50 Rendering Content Conditionally

  Made button's onClick method trigger a method to toggle (hide/show) a certain div
    the div is wrapped in {} and this.state.showPersons ? <div>...</div>
        is added to check if original value of showPersons is true, if not true
        before ending bracket write " : null "

        Code:

        toggleDivHandler = () => {
          const doesShow = this.state.showPersons (originaly == false)
          this.setState({showPersons: !doesShow})
        }

    An alternative to using the ternary expression statement used above,
    we can create a constant variable , say, "persons" = null and right after the render() method call
    write if(this.state.showPersons){
      persons = <div>...</div>
    }
    This way keeps the return() call a lot cleaner.

Lecture 52/53  Outputting Lists

          Convert lists/ arrays into proper JSX format using the map() method.
              the map method receives an argument (name of your choice) which is represents each element in the array
              Previously, we coded an array named persons that holds 3 Person components that was held in the state.
              We then hardcoded each person component and assigned each property using the index. <Person name={this.state.persons[0].name}, <Person name={this.state.persons[1].name}>
              Now lets change the code so it populates the person components dynamically.

              Code:

              if (this.state.showPersons){
                persons = (
                <div>
                {this.state.persons.map(person => {  // the map() function maps every element in array
                  return <Person                     /return a dynamically populating Person component thanks to the map() method
                    name = {person.name}
                    age = {person.age}/>
                })}
                </div>
                );
              }

Lecture 54 Lists and state

  Map() method can take another argument e.g. 'index' to keep track of each element in array where map() was called on
  Made a deletepersonhandler method which takes in the index arg passed in on the click prop in the Person component
    this method ^  takes the person index arg , first gets the persons array from the state, uses splice(personIndex, 1) to remove
    that element and setState({persons:persons}) updates the persons array in the state

Lecture 55 update state immutably
  Always create a copy of state data before manipulating it. Never change the state directly.

  Manipulating the persons array directly from the state is not a good practice. It is better to create a copy
  of the array in state (persons) before manipulating. We can use the slice() method to make a copy of the array

  Code:
    const persons =  this.state.persons.slice()
  Another alternative to making a copy of the persons array is to use the SPREAD operator (...)
  Code:
    const persons = [...this.state.persons];
  Spread takes all elements of old array and spreads them into the new array (makes a copy)

Lecture 56 List and Keys

  Key is a prop that is important to add when rendering lists of data
    It is a default propery React expects to find in any element whether custom or preset
    it is used to help update the list effeciently

  The key prop should be unique so each element can be identified.
    change the person state so that now it includes a property called id which will
    be used as the unique key prop inside the Person element

Lecture 57 Flexible Lists

  the nameChangedHandler takes the id as an arg as well as the event,
     we can use the findIndex() method to find the index of each element in an array,
      this method returns true or false depending whether it was the element we were looking for
      we can use the ID that each person has and compare it with the id passed in to the nameChangedHandler method

      Code:
      nameChangedHandler(event, id){
        const personIndex = this.state.persons.findIndex( p => {
          return p.id == id; //returns true if ids match
        });

        const person = {
        ...this.state.persons[personIndex]; //create a person const of now known index
        }
      }

    Now we can use personIndex to identify which element in persons array we are going to target
    and change the name only on that person and then update the array by making a copy of persons array
    Code:
      person.name = event.target.value; //will change the specified element 'name' property

      const persons = [...this.state.persons]; //make a copy of the original persons array from the state
      persons[personIndex] = person; //update the persons array with newly changed person element.

    Now we can finally update the whole persons array in state by using setState

    Code:

      this.setState({persons: persons}) // updates old persons array with newly updated one.
